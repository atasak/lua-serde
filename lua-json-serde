#! /bin/python

from os import path, makedirs
from sys import argv
from glob import glob
from pathlib import Path

from load import readMultiAST
from template import renderStructs

if len(argv) < 4:
    print("Usage: ")
    print("lua-json-serde <outputdir> <includeheader> <inputdir>")
    exit(0)

outputDir = argv[1]
includeHeader = argv[2]
configs = glob(argv[3] + "/**/*.yaml", recursive=True)

if not path.exists(outputDir):
    makedirs(outputDir)

astList = readMultiAST(configs, includeHeader)
generatedFiles = []

for ast in astList:
    render = renderStructs(ast)

    filename = ast['filename'] + '.hpp'
    generatedFiles.append(filename)

    outPath = path.join(outputDir, filename)

    if Path(outPath).read_text() == render:
        print(filename + " unchanged")
        continue

    file = open(outPath, 'w')
    file.write(render)
    file.close()

# file = open(path.join(outputDir, 'include_all.hpp'), 'w')
# file.writelines(['#include "' + filename + '"\n' for filename in generatedFiles])
# file.close()




