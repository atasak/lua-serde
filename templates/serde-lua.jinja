
{% macro fromLuaTable(name, splits) %}
    void {{ name }}::fromLuaTable(const sol::table &table) {
        {% if splits.mode != 'empty' %}
            for (const auto &[key, value] : table) {
                #ifndef NDEBUG
                    if (!key.is<std::string>())
                        throw gu_err("All keys in the table must be a string!");
                #endif

                {% if splits.mode != 'singleton' and splits.mode != 'empty' %}
                auto name = key.as<std::string>();
                {% endif %}

                {{ createSplit(splits) }}
            }
        {% endif %}
    }
{% endmacro %}

{% macro createSplit(splits) %}
    {% if splits.mode == 'singleton' %}
        #ifndef NDEBUG
        if (key.as<std::string>() != "{{ splits.value.name }}")
            throw gu_err("Name not in table: " + key.as<std::string>() + ", did you mean {{ splits.value.name }}?");
        {
            auto optional = value.as<sol::optional<{{ splits.value.typ }}>>();
            if (!optional.has_value())
                throw gu_err("Could not convert value given for '{{ splits.value.name }}' to {{ splits.value.typ }}!\n");
            this->{{ splits.value.name }} = optional.value();
        }
        #endif

    {% elif splits.mode == 'length' %}
        switch (name.length()) {
            {{ splitCases(splits.buckets) }}
            {{ switchDefault() }}
        }
    {% elif splits.mode == 'letter' %}
        switch (name[{{ splits.index}}]) {
            {{ splitCases(splits.buckets) }}
            {{ switchDefault() }}
        }
    {% endif %}
{% endmacro %}

{% macro splitCases(cases) %}
    {% for case in cases %}
        case {{ case.key }}:
            {{ createSplit(case) }}
            break;
    {% endfor %}
{% endmacro %}

{% macro switchDefault() %}
    #ifndef NDEBUG
    default:
        throw gu_err("Name not in table: " + name);
        break;
    #endif
{% endmacro %}


{% macro generateLuaUserType(structName, struct) %}

    void {{ structName }}::generateLuaUserType(sol::state &lua)
    {
        sol::usertype<{{ structName }}> luaUserType = lua.new_usertype<{{ structName }}>("{{ structName }}",

            sol::call_constructor,
            sol::constructors<{{ structName }}(), {{ structName }}(const sol::table &)>()
        );

        {% for field in struct.expose %}
            luaUserType["{{ field.name }}"] = &{{ structName }}::{{ field.name }};
        {% endfor %}
    }

{% endmacro %}

{% macro registerEntityEngineFunctions(structName, struct) %}

void {{ structName }}::registerEntityEngineFunctions(sol::table &table, entt::registry &reg)
{
    auto utilsTable = table["{{ structName }}"].get_or_create<sol::table>();

    utilsTable["getFor"] = [&] (entt::entity entity) -> {{ structName }} * {

        {% if not struct.expose %} // struct.expose is empty

            throw gu_err("{{ structName }} is an empty struct thus cannot be returned.");
        {% else %}

            return &reg.get_or_assign<{{ structName }}>(entity);
        {% endif %}
    };
    utilsTable["tryGetFor"] = [&] (entt::entity entity) -> {{ structName }} * {

        {% if not struct.expose %} // struct.expose is empty

            return NULL;
        {% else %}

            return reg.try_get<{{ structName }}>(entity);
        {% endif %}
    };
    utilsTable["has"] = [&] (entt::entity entity) -> bool {
        return reg.has<{{ structName }}>(entity);
    };
    utilsTable["remove"] = [&] (entt::entity entity) {
        reg.remove_if_exists<{{ structName }}>(entity);
    };
    utilsTable["animate"] = [&] (entt::entity e, const char *field, sol::object goalValue, float duration, sol::safe_function onFinished) {

        {% if not struct.expose %} // struct.expose is empty

            throw gu_err("Cannot animate empty Component ({{structName}})");
        {% else %}

            auto interpolator = reg.get_or_assign<{{ structName }}>(e).getInterpolator(field, goalValue);

            Animated &animated = reg.get_or_assign<Animated>(e);

            float progress = 0;

            animated.animationUpdateFunctions[field] = [interpolator, e, &reg, progress, duration, onFinished] (float deltaTime) mutable -> bool {

                progress = min(progress + deltaTime / duration, 1.f);

                interpolator(reg.get_or_assign<{{ structName }}>(e), progress);

                if (progress >= 1)
                {
                    luau::tryCallFunction(onFinished);
                    return true;
                }
                return false;
            };

        {% endif %}

    };
}

std::function<void({{ structName }} &, float)> {{ structName }}::getInterpolator(const std::string &fieldToInterpolate, sol::object goalValue) const
{
    {# TODO: call getInterpolator() on member when fieldToInterpolate == "field.interpolatable_field" #}
    {% for field in struct.expose %}

        if (fieldToInterpolate == "{{ field.name }}")
        {
            if (!goalValue.is<{{ field.typ }}>())
                throw gu_err("Given goal value for '{{ structName }}." + fieldToInterpolate + "' is not a {{ field.typ }}");

            {{ field.typ }} goalValTyped = goalValue.as<{{ field.typ }}>();
            {{ field.typ }} startVal = this->{{ field.name }};

            return [startVal, goalValTyped] ({{ structName }} &structt, float interpolate_x) {

                Interpolation::interpolate(startVal, goalValTyped, interpolate_x, structt.{{ field.name }});
            };
        }
        else

    {% endfor %}

    {
        throw gu_err("Cannot get an interpolator for non-existing field '{{ structName }}." + fieldToInterpolate + "'!");
    }
}

{% endmacro %}
